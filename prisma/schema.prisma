generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String
  full_name     String
  email         String   @unique
  password      String
  profile_photo String?
  bio           String?
  created_at    DateTime @default(now())
  created_by    Int?
  updated_at    DateTime @updatedAt
  updated_by    Int?

  threads        Thread[]    @relation("threads_created_by")
  threads_update Thread[]    @relation("threads_updated_by")
  replies        Reply[]
  likes          Like[]
  following      Following[] @relation("following_as_follower")
  followers      Following[] @relation("following_as_following")

  @@map("users")
}

model Thread {
  id                Int      @id @default(autoincrement())
  content           String
  image             String?
  number_of_replies Int      @default(0)
  created_at        DateTime @default(now())
  created_by        Int?
  updated_at        DateTime @updatedAt
  updated_by        Int?

  author  User?   @relation("threads_created_by", fields: [created_by], references: [id])
  updater User?   @relation("threads_updated_by", fields: [updated_by], references: [id])
  replies Reply[]
  likes   Like[]

  @@index([created_by])
  @@index([updated_by])
  @@map("threads")
}

model Reply {
  id         Int      @id @default(autoincrement())
  user_id    Int
  thread_id  Int
  image      String?
  content    String
  created_at DateTime @default(now())
  created_by Int?
  updated_at DateTime @updatedAt
  updated_by Int?

  user   User   @relation(fields: [user_id], references: [id])
  thread Thread @relation(fields: [thread_id], references: [id])

  @@index([user_id])
  @@index([thread_id])
  @@map("replies")
}

model Like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  thread_id  Int
  created_at DateTime @default(now())
  created_by Int?
  updated_at DateTime @updatedAt
  updated_by Int?

  user   User   @relation(fields: [user_id], references: [id])
  thread Thread @relation(fields: [thread_id], references: [id])

  @@unique([user_id, thread_id])
  @@index([user_id])
  @@index([thread_id])
  @@map("likes")
}

model Following {
  id           Int      @id @default(autoincrement())
  following_id Int
  follower_id  Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  following_user User @relation("following_as_following", fields: [following_id], references: [id])
  follower_user  User @relation("following_as_follower", fields: [follower_id], references: [id])

  @@unique([following_id, follower_id])
  @@index([following_id])
  @@index([follower_id])
  @@map("following")
}
